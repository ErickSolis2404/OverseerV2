Notes:
- A weapon of size "large" will be two-handed.
- An item with "notaweapon" anywhere in the abstratus field will not be equippable as a weapon.
- An item without an entry in the "wearable" field or with "none" in the wearable field will not be equippable as a wearable.
- Thus an item with both those qualities is not equippable at all.
- When making a wearable, place the wearable slots they take up in the wearable field and leave the abstratus field as "notaweapon"
- e.g. for something that takes up headgear and bodygear, abstratus will be "notaweapon" and wearable will be "headgear, bodygear"
- Permitted slots: headgear, bodygear, accessory
- Flat power from accessories needs to be carefully controlled. Headgear and bodygear can be a bit stronger, though.
- The cap for bodygear is 1000 power
- The cap for headgear is 666 power
- The cap for accessory is 333 power
- The cap for the bonuses on these items is half the power cap. So the cap for bodygear bonuses is 500
- Every point below the power cap an item is increases the bonus cap by 1.
- So for example, a bodygear item with 500 power could have a bonus of +1000
- Note however that it's "power + highest bonus" that's important for grist cost balancing.
- Any item with multiple slots adds the caps for those slots. So a bodygear/headgear item has a cap of 1666.
- Gloves are often not wearables! Glove items fall under the glovekind abstratus. Some may count as accessories instead. Yes, this is kind of silly.
- The 333 power slots are a good place to put minor wearable abilities.
- However bear in mind that they should be less powerful to compensate for this.
- This lets players pick a few minor abilities or just some raw power if they prefer.
- Most properties are listed together like PROPERTY1|PROPERTY2|. Effects, statuses, and consumable properties all work like this.
- Place COMPUTER| in the effects string in order to have the item function like a computer.

Here is a list of consumable properties:

General notes:
- There are some terms that always mean the following things if they appear in the format:
- scope - If 0, this will only affect the user. If 1, all strifers on the user's side. If 2, ALL strifers in the strife.
- If 3, all strifers who are allies of the target. If 4, only the chosen target (which can be the user)
- 0, 1, and 2 ignore the target argument, if any is provided.
- overs - If 1, this effect can raise the modified value to over maximum or lower it to under minimum
- (e.g. HEALTH with overs set to 1 can overheal if positive or kill if negative)
- message - This message will print if the effect is applicable; it will usually replace %USER% with $consumuser's name and %TARGET% with the current target
- Note that for USEMESSAGE it'll replace both with the user's name.

Use Message
- Format: USEMESSAGE:<message>|
- Prints out <message> when the consumable is used

Activation Chance
- Format: ACTCHANCE:<chance>:<failmessage>:<preserve if fail>|
- When the consumable string reaches this tag, it has a <chance>% chance to continue going
- That means there's a <chance>% chance of all the stuff AFTER this tag occurring at all
- <failmessage> is printed if <chance>% roll fails.
- if <preserve if fail> is set to 1, the item will not be consumed if it fails.
- if <preserve if fail> is set to 0, the item will ALWAYS be consumed if it fails.
- Thus something like ACTCHANCE:50:The item explodes!:0| at the start of the consumable string, for example
- produces an item that has a 50/50 chance of blowing up when used.

Random Message
- Format: RANDMESSAGE:<message1>:<message2>:<message3>:<etc>|
- Any number of messages may be placed after the tag
- It picks a random one and prints it

Situational
- Format: SITUATIONAL:<flags>:<denymessage>:<preserve if fail>|
- Item can only be used in certain situations, determined by <flags>
- Flags are comma-separated. So for example "SITUATIONAL:STRIFE,DUNGEON:Oak says this isn't the time to use that!|" means the item can be used in strife or in a dungeon
- Permitted tags: STRIFE, NONSTRIFE, DUNGEON, NONDUNGEON, MEDIUM, NONMEDIUM
- if <denymessage> is left empty, it defaults to "OAK: This isn't the time to use that!"
- This flag only stops effects AFTER it from happening. So if you want an item that can't be used outside strife, make sure this tag goes first.
- If there are multiple SITUATIONAL tags, the flag only stops effects up to the next SITUATIONAL tag.
- Hence, SITUATIONAL:STRIFE|<stuff>|SITUATIONAL:NONSTRIFE|<more stuff>| will cause <stuff> if used in strife and <more stuff> if used outside it
- As with Activation Chance, <preserve if fail> value of 1 means the item is not consumed if you used it in the wrong place.
- <preserve if fail> value of 0 means the item is ALWAYS consumed if you used it in the wrong place.
- What this means taken together is that an item that has additional effects in certain situations
- can be made by placing those effects after a SITUATIONAL tag

Health
- Modifies the current health of targets
- Format: HEALTH:<amount>:<scope>:<overs>|
- <amount> is the amount of health. Can be negative for "attack" consumables (like a bomb!)
- <scope> and <overs> mean what the general info at the top says they mean (scope is determining who is affected, overs determines if the consumable can overheal or kill or if it can't)

Energy
- Modifies the current energy of targets
- Format: ENERGY:<amount>:<scope>:<overs>:<continue if fail>|
- <amount> is the amount of energy. Can be negative for consumables that drain the player's energy to do something cool
- (or to drain an enemy's energy, although this should not be done as it makes Denizen fights much easier)
- Energy represents the player's Aspect Vial
- if <continue if fail> is set to 0, the item stops processing if it reaches this tag and any target doesn't have as much energy as <amount>
- <overs> MUST be 1 for <continue if fail> to work.
- If <continue if fail> fails, the item will not be consumed.
- This means a tag of ENERGY:<amount>:0:1:0| reads "the player must spend <amount> Aspect Vial for the effects after this tag to trigger"
- Ideally this tag will be placed first.

Bonus
- Adds a string to the bonuses field of the target strifer.
- Format: BONUS:<bonus string>:<scope>:<resist>:<message>
- <bonus string> is the string to insert into the bonus field.
- Valid bonus strings are <bonustype>@<duration>@<amount>|
- In the bonus string, <duration> is how long the bonus lasts for and <amount> is the quantity (can be negative)
- Valid bonus types are POWER, OFFENSE, DEFENSE, AGGRIEVE, AGGRESS, ASSAIL, ASSAULT, ABUSE, ACCUSE, ABJURE, ABSTAIN
- The bonus will affect whatever the bonus type is by <amount> power.
- If it's going to affect an enemy, only use POWER, OFFENSE, or DEFENSE.
- <resist> is a resist type (such as Time). If the effect is resisted, it doesn't happen. Set to "None" for unresistable.
- <message> is printed out on use.

Cure
- Format: CURE:<curestatus>:<scope>:<message>|
- Removes one or more status effects.
- Each string is searched directly, so for more complicated searches, use / for | and @ for :.
- Example: to cure all instances of bleeding and poison on the target: CURE:/POISON@,/BLEEDING@:0:%TARGET% receives first aid.|
- Thus, <curestatus> is a list of types of instance to be removed
- /POISON@ will match "|POISON:"
- POISON@ will match "POISON:"
- For all current status effects, the latter string should be fine.
- CURE removes all status effects with a match to the specified string. (Ask Overseer for more info if you are confused. If you don't know how to contact him, ask another item creator)
- <message> is printed only if a status effect was removed.

Special
- Format: SPECIAL:<effectname>:<parameters>|
- This invokes a special, hardcoded effect called EFFECTNAME
- Don't use this tag! It's only for special occasions.

Preserve
- Format: PRESERVE|
- Sets the item not to be consumed when the parser comes across this tag
- If something else AFTER the preserve tag tells us to consume the item (e.g. ACTCHANCE) the preserve tag will be overridden!

Add Status
- Format: <status string>:<scope>:<resistance>:<message>|
- <status string> is the status string you want to appear in the target's status field
- If you want the status string to contain :, use @ instead.
- If you want the status string to contain @, use & instead.
- Example: TIMESTOP@1:3:Time:%TARGET% is time stopped!| stops time for 1 round on all enemies.
- See the developer's guide to effects for a full rundown of status effects that can be applied here.
- <resistance> is a resistance that may apply (e.g. Time). If resister, effect does not occur. Set to "None" for unresistable.
- <message> is printed when effect occurs.